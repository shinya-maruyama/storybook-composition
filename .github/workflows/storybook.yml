name: storybook

on:
  # プッシュもしくはPull Requestでワークフローをトリガーする
  # ただしプッシュはdevelopブランチの場合のみ
#   push:
#     branches:
#       - develop
  pull_request:
    types: [opened, synchronize, reopend, closed]



jobs:
  check_tree_hash:
    runs-on: ubuntu-18.04
    if: github.event.action != 'closed'
    outputs:
      target: ${{ steps.dist_target.outputs.target }}
    steps:
      - name: check expires
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
        uses: actions/checkout@v2
        with:
          ref: gh-pages
      - name: expires
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git
          test -d ${{ github.event.pull_request.number }} || exit 0
          git rm -r ${{ github.event.pull_request.number }}
          git commit -m "delete storybook preview for closed PR by GitHub Action"
          git push
          exit 0
      - name: dist_target
        id: dist_target
        # pull_requestの時は、{プルリクエストのID番号}/配下にdeploy
        # pushの時は、develop/配下にdeploy
        run: |
          ${{ github.event_name == 'pull_request'}} && TARGET=${{ github.event.pull_request.number }} || TARGET='develop'
          echo "::set-output name=target::${TARGET}"

  deploy_storybook_fe_dashboard:
    runs-on: ubuntu-18.04
    if: github.event.action != 'closed'
    needs: [check_tree_hash]
    defaults:
      run:
        working-directory: ./fe-dashboard
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '12.x'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build storybook fe-dashboard
        run: yarn build-storybook
      - run: npx sb extract
      - run: echo "${{ needs.check_tree_hash.outputs.target }}/fe-dashboard"
      - name: Deploy fe-dashboard storybook
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./fe-dashboard/storybook-static
          destination_dir: ${{ needs.check_tree_hash.outputs.target }}/fe-dashboard
          enable_jekyll: true

  deploy_storybook_fe_portal:
    runs-on: ubuntu-18.04
    if: github.event.action != 'closed'
    needs: [check_tree_hash]
    defaults:
      run:
        working-directory: ./fe-portal
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '12.x'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build storybook fe-portal
        run: yarn build-storybook
      - run: npx sb extract
      - run: echo "${{ needs.check_tree_hash.outputs.target }}/fe-fe-portal"
      - name: Deploy fe-portal storybook
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./fe-portal/storybook-static
          destination_dir: ${{ needs.check_tree_hash.outputs.target }}/fe-portal
          enable_jekyll: true

  deploy_storybook_composition:
    runs-on: ubuntu-18.04
    if: github.event.action != 'closed'
    needs: [check_tree_hash, deploy_storybook_fe_dashboard, deploy_storybook_fe_portal]
    defaults:
      run:
        working-directory: ./storybook-composition
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '12.x'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build storybook
        run: yarn build-storybook
      - run: echo "${{ needs.check_tree_hash.outputs.target }}/storybook"
      - name: Deploy storybook
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-composition/storybook-static
          destination_dir: ${{ needs.check_tree_hash.outputs.target }}/storybook
          enable_jekyll: true

      - name: add comment url
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const storybookPath = 'https://shinya-maruyama.github.io/storybook-composition/${{ github.event.pull_request.number }}/storybook/'
            const commentBody =
            `Visit the Storybook preview URL for this PR (updated for commit ${{ github.event.pull_request.head.sha }}):
            
            ${storybookPath}`
            
            // Get the existing comments.
            const {data: comments} = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            })

            // Find any comment already made by the bot.
            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes(storybookPath))

            if (botComment) {
              await github.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              })
            } else {
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body: commentBody
              })
            }

