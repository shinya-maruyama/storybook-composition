name: on_pr

on: pull_request

jobs:
  comment:
    runs-on: ubuntu-18.04
    steps:
      - run: |
          echo ${{github.head_ref}}
  deploy_storybook_fe_dashboard:
    runs-on: ubuntu-18.04
    defaults:
      run:
        working-directory: ./fe-dashboard
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '12.x'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build storybook fe-dashboard
        run: yarn build-storybook
      - run: npx sb extract
      - name: Deploy fe-dashboard storybook
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./fe-dashboard/storybook-static
          destination_dir: ${{github.head_ref}}/fe-dashboard
          enable_jekyll: true

  deploy_storybook_fe_portal:
    runs-on: ubuntu-18.04
    defaults:
      run:
        working-directory: ./fe-portal
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '12.x'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build storybook fe-portal
        run: yarn build-storybook
      - run: npx sb extract
      - name: Deploy fe-portal storybook
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./fe-portal/storybook-static
          destination_dir: ${{github.head_ref}}/fe-portal
          enable_jekyll: true

  deploy_storybook_composition:
    runs-on: ubuntu-18.04
    needs: [deploy_storybook_fe_dashboard, deploy_storybook_fe_portal]
    defaults:
      run:
        working-directory: ./storybook-composition
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '12.x'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build storybook
        run: yarn build-storybook
      - name: Deploy storybook
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-composition/storybook-static
          destination_dir: ${{github.head_ref}}/storybook
          enable_jekyll: true

  notification:
    runs-on: ubuntu-18.04
    needs: [deploy_storybook_composition]
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: add comment url
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // storybook preview URL for this PR
            const url = 'https://shinya-maruyama.github.io/storybook-composition/${{github.head_ref}}/storybook/'
            const commentBody = 'Visit the storybook preview URL for this PR (updated for commit ${{ toJson(github) }}):\n${{ url }}'

            // Get the existing comments.
            const {data: comments} = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            })

            // Find any comment already made by the bot.
            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes(url))

            if (botComment) {
              await github.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              })
            } else {
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body: commentBody
              })
            }
